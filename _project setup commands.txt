//create new solution
> dotnet new sln 

// add new project -> webapi
> dotnet new webapi -o src/AuctionService -controllers

// add the project to solution
> dotnet sln add src/AuctionService

//debug 
//goto project which you want to debug > cd src/AuctionService
AuctionService > dotnet watch

------------------------------------dotnet tools-------------------------
//check global tools list
> dotnet tool list -g

//install tool: dotnet-f globally
> dotnet tool install dotnet-ef - g

(//for tool update use > dotnet tool update dotnet-ef -g)

//create db migrations
AuctionService > dotnet ef migrations add "InitialCreate" -o Data/Migrations

----------------------------------docker---------------------------------
//run docker compose services // -d means no logs while docker running (make sure to run command in solution folder as docker-compose.yml file is there only)
sln > docker compose up -d 

AuctionService > dotnet ef database update

//drop database
AuctionService > dotnet ef database drop 

// check volumns list
> docker volume list

//remove volume
> docker volume rm carsties_mongodata

//remove docker containers
> docker compose down
----------------------------------version control using git--------------

//enable source control - git
> git init

//ignore unnecessory dotnet project files
> dotnet new gitignore 

//stage files
> git add .

//commit 
> git commit -m "end of section 2"

// if your branch is master, change it to main as master decprecated in github using the command > git branch -M main

> git remote add origin https://github.com/darabjavaid/Carsties.git

>git push origin main

--------------------------------search service api-------------------------

> dotnet new webapi -o src/SearchService -controllers

> dotnet sln add src/SearchService

//    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopwf


----------------------Contracts class lib----------------

> dotnet new classlib -o src/Contracts

> dotnet sln add src/Contracts

//add reference in both auction and search service

AuctionService > dotnet add reference ../../src/Contracts
SearchService  > dotnet add reference ../../src/Contracts


--------------------------------------add outbox table migrations for AuctionService MassTransit------

AuctionService > dotnet ef migrations add Outbox


--------------------------------------install duende identity server----------------

//isntall all templates for Duende Identity Server
> dotnet new install Duende.Templates

> dotnet new duende-is-aspid -o src/IdentityService

> dotnet sln add src/IdentityService

//add migrations (first remove the sqllite migrations folder)
IdentityService > dotnet ef migrations add "InitialCreate" -o Data/Migrations


--------------------------------------API Gateway--------------------------------------
//simple web project only (not webapi project)
> dotnet new web -o src/GatewayService

> dotnet sln add src/GatewayService

-------------------------------------Containerize microservices------------------------
create docker file in auction service

> docker build -f src/AuctionService/Dockerfile -t testing123 .

> docker run testing123

# Copy Zscaler PEM certificates
# download the zscalar certificate from: https://www.nuget.org/ with name as ZscalerRootCA.pem and put it in same sln folder
COPY ZscalerRootCA.pem /usr/local/share/ca-certificates/ZscalerRootCA.crt

# Update CA store in Linux container
RUN update-ca-certificates


> docker compose build auction-svc

> docker compose up -d


//repeat same for search and other services

> docker compose build search-svc
> docker compose build identity-svc

> docker compose up -d

//-v means remove volumes as well
> docker compose up -v


----------------------------------------------------------           ----------------------------------------------------------
----------------------------------------------------------CLIENT SIDE----------------------------------------------------------

>mkdir frontend
>cd frontend

frontend > npx create-next-app@latest

frontend > web-app > npm run dev

//remove the certificate issue
run below query on CMD

cmd > setx NODE_EXTRA_CA_CERTS "C:\Work\Learning\Udemy\Build Microservices with DotNet and NextJs\Carsties\ZscalerRootCA.pem"


get icons 

web-app > npm install react-icons
web-app > npm install react-countdown

//UI components libaray
web-app > npx flowbite-react@latest init
//if any issue while installing above flowbit, use direct below command to install the flowbite package
web-app > npm install flowbite-react


//install global state management libaray zustand
web-app > npm install zustand

// 
web-app > npm install query-string


--------update service and build docker again for that service------
> docker compose build search-svc
> docker compose build identity-svc
--------------------------------------------------------------------


install nextAuth.js for authentication of client side
//from: documentation @ https://authjs.dev/getting-started/installation?framework=Next.js
//do all the steps mentioned in the documents, 
web-app > npm install next-auth@beta
web-app > npx auth secret

//documentation from : > https://authjs.dev/getting-started/providers/duende-identity-server6


----------------------------------------------------------missing secret----------------------------------------------------------
run below command to add auth secret key in .env.local file as this file is excluded from git ignore.

web-app > npx auth secret
---------------------------------------------------------------------------------------------------------------------------------
for creating forms in web app (react)

web-app > npm install react-hook-form react-datepicker

react-hot-toast


web-app > npm install react-hot-toast